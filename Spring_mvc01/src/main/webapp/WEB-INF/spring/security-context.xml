<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:security="http://www.springframework.org/schema/security"
xsi:schemaLocation="http://www.springframework.org/schema/security
http://www.springframework.org/schema/security/spring-security.xsd
http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd">


	<security:http> <!--  스프링 시큐리티가 http에서 알수 있게 하는 시작 지점 설정 -->
	
		<security:intercept-url pattern="/sample/all" access="permitAll" />
		<!-- url 특정한 에 접근할 때 인터셉터(가로채기)를 이용해서 접근을 제한하는 설정은
			<security:intercept-url> 을 이용한다
			 pattern 속성값으로 컨트롤러에 지정한 매핑주소가 들어간다 
			 access 속성값에 권한 범위를 체크한다 여기서는 모든 사용자를 허용한다.
			 permitAll : 모든 사용자 허용 -->

		<security:intercept-url pattern="/sample/member"
		 access="hasRole('ROLE_MEMBER')" />
		<!-- ROLE_MEMBER :는 로그인한 사용자만 접근할 수 있다 -->
		
		<security:intercept-url pattern="/sample/admin"
		 access="hasRole('ROLE_ADMIN')" />
		 <!-- 로그인 한 사용자들 중에서 관리자 권한을 가진 사용자만 접근할 수 있다. -->
		
		
		<security:form-login /> <!--시큐리티 폼 로그인 설정 => 스프링 시큐리티 내장 폼 로그인 실행 -->
	</security:http>
	
	<security:authentication-manager>
	<!-- 스프링 시큐리티가 동작하기 위해서는 authentication-manager 설정 (인증관리자)-->
		<security:authentication-provider><!-- 인증제공자 -->
			<security:user-service>
				<security:user name="member" password="{noop}member"
				 authorities="ROLE_MEMBER" />
				<!-- member, 아이디가 비번이 member인 사용자는
				 로그인 인증처리를 한다  {noop}는 비번을 인코딩 즉, 암호화 처리 없이 사용한다 -->
				 
				 <security:user name="admin" password="{noop}admin"
				 authorities="ROLE_MEMBER,ROLE_ADMIN " />
				 <!-- 아이디,비번이 admin인 사용자는 sample/member와 
				      sample/admin에 모두 접근 가능하다  -->
				 
				 
			</security:user-service>
		</security:authentication-provider>
	</security:authentication-manager>
	
	
	
</beans>
